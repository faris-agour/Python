{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Expression Evaluator Using normal function\n",
    "\n",
    "\n",
    "Task:\n",
    "Write a function evaluate_expression(expr) that evaluates a mathematical expression provided as a string containing single-digit numbers and operators (+, -, *, /). The function should compute the result following the correct order of operations (PEMDAS/BOD-MAS).\n",
    "\n",
    "#### **Constraints:**\n",
    "\n",
    "- Do not use eval() or similar built-in functions to evaluate the expression.\n",
    "- The expression may contain parentheses to indicate order of operations.\n",
    "- Use loops or any other wat to parse the string and the best for you to best match-case statement to identify and apply operators.\n",
    "- Handle division operations as floating-point division.\n",
    "\n",
    "**Example:**\n",
    "\n",
    "`evaluate_expression(\"3+5*2-8/4\")`\n",
    "\n",
    "**Output:**\n",
    "\n",
    "**10.0**\n",
    "\n",
    "**Requirements:**\n",
    "\n",
    "- Implement operator precedence.\n",
    "- Support for parentheses is optional but will be considered for extra credit.\n",
    "- Provide error handling for invalid expressions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1081.2299\n"
     ]
    }
   ],
   "source": [
    "def calc(operator, val):  # [first, second]\n",
    "    second = val.pop()\n",
    "    first = val.pop()\n",
    "\n",
    "    op = operator.pop()\n",
    "    if op == '+':\n",
    "        val.append(first + second)\n",
    "    elif op == '-':\n",
    "        val.append(first - second)\n",
    "    elif op == '*':\n",
    "        val.append(first * second)\n",
    "    elif op == '/':\n",
    "        if second == 0:\n",
    "            raise ValueError(\"Division by zero is undefined\") #----------------> handle division by zero\n",
    "        val.append(round(first / second, 4))\n",
    "    else:\n",
    "        raise ValueError(\"Invalid operator\") #----------------> if there is another operator beside +, -, *, /\n",
    "\n",
    "\n",
    "def priority(op):\n",
    "    if op in ['+', '-']:\n",
    "        return 1\n",
    "    elif op in ['*', '/']:\n",
    "        return 2\n",
    "    return 0\n",
    "\n",
    "\n",
    "def evaluate_expression(exp):\n",
    "    expr = exp.replace(\" \", \"\")\n",
    "    val = []\n",
    "    op = []\n",
    "    i = 0\n",
    "\n",
    "    while i < len(expr):\n",
    "\n",
    "        if expr[i].isdigit():\n",
    "            #----------------------------------> count multi_digit numbers\n",
    "            c = i  \n",
    "            while c < len(expr) and expr[c].isdigit():\n",
    "                c += 1\n",
    "            val.append(int(expr[i:c]))\n",
    "            i = c\n",
    "            # -----------------------------------\n",
    "            \n",
    "        elif expr[i] == '(':\n",
    "            op.append(expr[i])\n",
    "            i += 1\n",
    "\n",
    "        elif expr[i] == ')':\n",
    "            while op[-1] != '(':      #------> do all the operations inside the inner parentheses\n",
    "                calc(op, val)\n",
    "            op.pop()  #---> to delete the (\n",
    "            i += 1\n",
    "\n",
    "        elif expr[i] in ['+', '-', '*', '/']:\n",
    "            \n",
    "            if expr[i + 1] in ['+', '-', '*', '/']:\n",
    "                raise ValueError(f\"Invalid placement for the operators: {expr}\") # ------------> if there two operators in a row\n",
    "            \n",
    "            while op and priority(expr[i]) <= priority(op[-1]):\n",
    "                calc(op, val)\n",
    "            op.append(expr[i])\n",
    "            i += 1\n",
    "            \n",
    "        else:\n",
    "            raise ValueError(f\"Invalid expression: {expr}\")  # --------------> if there is an invalid character\n",
    "        \n",
    "    while op:\n",
    "        calc(op, val)\n",
    "        \n",
    "    return val[-1]\n",
    "\n",
    "\n",
    "expr1 = \"3+5*8-8-((9-56)-6065*5/1*3)/87\"\n",
    "print(evaluate_expression(expr1))\n"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-11-28T13:27:22.517146100Z",
     "start_time": "2024-11-28T13:27:22.506463Z"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1081.2298850574712\n"
     ]
    }
   ],
   "source": [
    "# test\n",
    "print(eval(\"3+5*8-8-((9-56)-6065*5/1*3)/87\"))"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-11-28T13:27:33.653577900Z",
     "start_time": "2024-11-28T13:27:33.623846900Z"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
